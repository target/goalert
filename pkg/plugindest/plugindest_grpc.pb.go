// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: pkg/plugindest/plugindest.proto

package plugindest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginDest_TypeInfo_FullMethodName         = "/goalert.v1.PluginDest/TypeInfo"
	PluginDest_ValidateField_FullMethodName    = "/goalert.v1.PluginDest/ValidateField"
	PluginDest_DisplayInfo_FullMethodName      = "/goalert.v1.PluginDest/DisplayInfo"
	PluginDest_SendAlert_FullMethodName        = "/goalert.v1.PluginDest/SendAlert"
	PluginDest_SendAlertBundle_FullMethodName  = "/goalert.v1.PluginDest/SendAlertBundle"
	PluginDest_SendAlertStatus_FullMethodName  = "/goalert.v1.PluginDest/SendAlertStatus"
	PluginDest_SendSchedOnCall_FullMethodName  = "/goalert.v1.PluginDest/SendSchedOnCall"
	PluginDest_SendSignal_FullMethodName       = "/goalert.v1.PluginDest/SendSignal"
	PluginDest_SendTest_FullMethodName         = "/goalert.v1.PluginDest/SendTest"
	PluginDest_SendVerification_FullMethodName = "/goalert.v1.PluginDest/SendVerification"
	PluginDest_MessageStatus_FullMethodName    = "/goalert.v1.PluginDest/MessageStatus"
	PluginDest_SearchField_FullMethodName      = "/goalert.v1.PluginDest/SearchField"
	PluginDest_FieldLabel_FullMethodName       = "/goalert.v1.PluginDest/FieldLabel"
)

// PluginDestClient is the client API for PluginDest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginDestClient interface {
	TypeInfo(ctx context.Context, in *TypeInfoRequest, opts ...grpc.CallOption) (*TypeInfoResponse, error)
	ValidateField(ctx context.Context, in *ValidateFieldRequest, opts ...grpc.CallOption) (*ValidateFieldResponse, error)
	DisplayInfo(ctx context.Context, in *DisplayInfoRequest, opts ...grpc.CallOption) (*DisplayInfoResponse, error)
	SendAlert(ctx context.Context, in *SendAlertRequest, opts ...grpc.CallOption) (*SendResponse, error)
	SendAlertBundle(ctx context.Context, in *SendAlertBundleRequest, opts ...grpc.CallOption) (*SendResponse, error)
	SendAlertStatus(ctx context.Context, in *SendAlertStatusRequest, opts ...grpc.CallOption) (*SendResponse, error)
	SendSchedOnCall(ctx context.Context, in *SendSchedOnCallRequest, opts ...grpc.CallOption) (*SendResponse, error)
	SendSignal(ctx context.Context, in *SendSignalRequest, opts ...grpc.CallOption) (*SendResponse, error)
	SendTest(ctx context.Context, in *SendTestRequest, opts ...grpc.CallOption) (*SendResponse, error)
	SendVerification(ctx context.Context, in *SendVerificationRequest, opts ...grpc.CallOption) (*SendResponse, error)
	MessageStatus(ctx context.Context, in *MessageStatusRequest, opts ...grpc.CallOption) (*MessageStatusResponse, error)
	SearchField(ctx context.Context, in *SearchFieldRequest, opts ...grpc.CallOption) (*SearchFieldResponse, error)
	FieldLabel(ctx context.Context, in *FieldLabelRequest, opts ...grpc.CallOption) (*FieldLabelResponse, error)
}

type pluginDestClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginDestClient(cc grpc.ClientConnInterface) PluginDestClient {
	return &pluginDestClient{cc}
}

func (c *pluginDestClient) TypeInfo(ctx context.Context, in *TypeInfoRequest, opts ...grpc.CallOption) (*TypeInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TypeInfoResponse)
	err := c.cc.Invoke(ctx, PluginDest_TypeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) ValidateField(ctx context.Context, in *ValidateFieldRequest, opts ...grpc.CallOption) (*ValidateFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateFieldResponse)
	err := c.cc.Invoke(ctx, PluginDest_ValidateField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) DisplayInfo(ctx context.Context, in *DisplayInfoRequest, opts ...grpc.CallOption) (*DisplayInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisplayInfoResponse)
	err := c.cc.Invoke(ctx, PluginDest_DisplayInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) SendAlert(ctx context.Context, in *SendAlertRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, PluginDest_SendAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) SendAlertBundle(ctx context.Context, in *SendAlertBundleRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, PluginDest_SendAlertBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) SendAlertStatus(ctx context.Context, in *SendAlertStatusRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, PluginDest_SendAlertStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) SendSchedOnCall(ctx context.Context, in *SendSchedOnCallRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, PluginDest_SendSchedOnCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) SendSignal(ctx context.Context, in *SendSignalRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, PluginDest_SendSignal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) SendTest(ctx context.Context, in *SendTestRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, PluginDest_SendTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) SendVerification(ctx context.Context, in *SendVerificationRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, PluginDest_SendVerification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) MessageStatus(ctx context.Context, in *MessageStatusRequest, opts ...grpc.CallOption) (*MessageStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageStatusResponse)
	err := c.cc.Invoke(ctx, PluginDest_MessageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) SearchField(ctx context.Context, in *SearchFieldRequest, opts ...grpc.CallOption) (*SearchFieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchFieldResponse)
	err := c.cc.Invoke(ctx, PluginDest_SearchField_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginDestClient) FieldLabel(ctx context.Context, in *FieldLabelRequest, opts ...grpc.CallOption) (*FieldLabelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FieldLabelResponse)
	err := c.cc.Invoke(ctx, PluginDest_FieldLabel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginDestServer is the server API for PluginDest service.
// All implementations must embed UnimplementedPluginDestServer
// for forward compatibility.
type PluginDestServer interface {
	TypeInfo(context.Context, *TypeInfoRequest) (*TypeInfoResponse, error)
	ValidateField(context.Context, *ValidateFieldRequest) (*ValidateFieldResponse, error)
	DisplayInfo(context.Context, *DisplayInfoRequest) (*DisplayInfoResponse, error)
	SendAlert(context.Context, *SendAlertRequest) (*SendResponse, error)
	SendAlertBundle(context.Context, *SendAlertBundleRequest) (*SendResponse, error)
	SendAlertStatus(context.Context, *SendAlertStatusRequest) (*SendResponse, error)
	SendSchedOnCall(context.Context, *SendSchedOnCallRequest) (*SendResponse, error)
	SendSignal(context.Context, *SendSignalRequest) (*SendResponse, error)
	SendTest(context.Context, *SendTestRequest) (*SendResponse, error)
	SendVerification(context.Context, *SendVerificationRequest) (*SendResponse, error)
	MessageStatus(context.Context, *MessageStatusRequest) (*MessageStatusResponse, error)
	SearchField(context.Context, *SearchFieldRequest) (*SearchFieldResponse, error)
	FieldLabel(context.Context, *FieldLabelRequest) (*FieldLabelResponse, error)
	mustEmbedUnimplementedPluginDestServer()
}

// UnimplementedPluginDestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginDestServer struct{}

func (UnimplementedPluginDestServer) TypeInfo(context.Context, *TypeInfoRequest) (*TypeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeInfo not implemented")
}
func (UnimplementedPluginDestServer) ValidateField(context.Context, *ValidateFieldRequest) (*ValidateFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateField not implemented")
}
func (UnimplementedPluginDestServer) DisplayInfo(context.Context, *DisplayInfoRequest) (*DisplayInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisplayInfo not implemented")
}
func (UnimplementedPluginDestServer) SendAlert(context.Context, *SendAlertRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAlert not implemented")
}
func (UnimplementedPluginDestServer) SendAlertBundle(context.Context, *SendAlertBundleRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAlertBundle not implemented")
}
func (UnimplementedPluginDestServer) SendAlertStatus(context.Context, *SendAlertStatusRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAlertStatus not implemented")
}
func (UnimplementedPluginDestServer) SendSchedOnCall(context.Context, *SendSchedOnCallRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSchedOnCall not implemented")
}
func (UnimplementedPluginDestServer) SendSignal(context.Context, *SendSignalRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSignal not implemented")
}
func (UnimplementedPluginDestServer) SendTest(context.Context, *SendTestRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTest not implemented")
}
func (UnimplementedPluginDestServer) SendVerification(context.Context, *SendVerificationRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerification not implemented")
}
func (UnimplementedPluginDestServer) MessageStatus(context.Context, *MessageStatusRequest) (*MessageStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageStatus not implemented")
}
func (UnimplementedPluginDestServer) SearchField(context.Context, *SearchFieldRequest) (*SearchFieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchField not implemented")
}
func (UnimplementedPluginDestServer) FieldLabel(context.Context, *FieldLabelRequest) (*FieldLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FieldLabel not implemented")
}
func (UnimplementedPluginDestServer) mustEmbedUnimplementedPluginDestServer() {}
func (UnimplementedPluginDestServer) testEmbeddedByValue()                    {}

// UnsafePluginDestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginDestServer will
// result in compilation errors.
type UnsafePluginDestServer interface {
	mustEmbedUnimplementedPluginDestServer()
}

func RegisterPluginDestServer(s grpc.ServiceRegistrar, srv PluginDestServer) {
	// If the following call pancis, it indicates UnimplementedPluginDestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginDest_ServiceDesc, srv)
}

func _PluginDest_TypeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).TypeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_TypeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).TypeInfo(ctx, req.(*TypeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_ValidateField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).ValidateField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_ValidateField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).ValidateField(ctx, req.(*ValidateFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_DisplayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisplayInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).DisplayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_DisplayInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).DisplayInfo(ctx, req.(*DisplayInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_SendAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).SendAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_SendAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).SendAlert(ctx, req.(*SendAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_SendAlertBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAlertBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).SendAlertBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_SendAlertBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).SendAlertBundle(ctx, req.(*SendAlertBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_SendAlertStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAlertStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).SendAlertStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_SendAlertStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).SendAlertStatus(ctx, req.(*SendAlertStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_SendSchedOnCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSchedOnCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).SendSchedOnCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_SendSchedOnCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).SendSchedOnCall(ctx, req.(*SendSchedOnCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_SendSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).SendSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_SendSignal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).SendSignal(ctx, req.(*SendSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_SendTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).SendTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_SendTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).SendTest(ctx, req.(*SendTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_SendVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).SendVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_SendVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).SendVerification(ctx, req.(*SendVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_MessageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).MessageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_MessageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).MessageStatus(ctx, req.(*MessageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_SearchField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).SearchField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_SearchField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).SearchField(ctx, req.(*SearchFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginDest_FieldLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginDestServer).FieldLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginDest_FieldLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginDestServer).FieldLabel(ctx, req.(*FieldLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginDest_ServiceDesc is the grpc.ServiceDesc for PluginDest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginDest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goalert.v1.PluginDest",
	HandlerType: (*PluginDestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TypeInfo",
			Handler:    _PluginDest_TypeInfo_Handler,
		},
		{
			MethodName: "ValidateField",
			Handler:    _PluginDest_ValidateField_Handler,
		},
		{
			MethodName: "DisplayInfo",
			Handler:    _PluginDest_DisplayInfo_Handler,
		},
		{
			MethodName: "SendAlert",
			Handler:    _PluginDest_SendAlert_Handler,
		},
		{
			MethodName: "SendAlertBundle",
			Handler:    _PluginDest_SendAlertBundle_Handler,
		},
		{
			MethodName: "SendAlertStatus",
			Handler:    _PluginDest_SendAlertStatus_Handler,
		},
		{
			MethodName: "SendSchedOnCall",
			Handler:    _PluginDest_SendSchedOnCall_Handler,
		},
		{
			MethodName: "SendSignal",
			Handler:    _PluginDest_SendSignal_Handler,
		},
		{
			MethodName: "SendTest",
			Handler:    _PluginDest_SendTest_Handler,
		},
		{
			MethodName: "SendVerification",
			Handler:    _PluginDest_SendVerification_Handler,
		},
		{
			MethodName: "MessageStatus",
			Handler:    _PluginDest_MessageStatus_Handler,
		},
		{
			MethodName: "SearchField",
			Handler:    _PluginDest_SearchField_Handler,
		},
		{
			MethodName: "FieldLabel",
			Handler:    _PluginDest_FieldLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/plugindest/plugindest.proto",
}
