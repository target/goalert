# Directive definitions are as per gqlgen documentation:
# https://gqlgen.com/master/config#inline-config-with-directives

# goField is used to tweak individual field configurations, rather than using gqlgen.yml
directive @goField(
  forceResolver: Boolean # forces the field to be resolved by a resolver, even if it already has a value; useful for computed fields where the model already has a partial value
  name: String # overrides the field name in the generated Go code
  omittable: Boolean # creates the field with a wrapper type (graphql.Omittable[T]) with a boolean indicating if the field is null (similar to sql.NullString and friends)
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# experimental is used to mark fields as experimental.
#
# Experimental fields are subject to change/removal without warning.
directive @experimental(
  flagName: String! # the name of the feature flag to use to enable this field
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
