type Query {
  phoneNumberInfo(number: String!): PhoneNumberInfo

  experimentalFlags: [ID!]!

  # Returns the list of recent messages.
  messageLogs(input: MessageLogSearchOptions): MessageLogConnection!
  debugMessages(input: DebugMessagesInput): [DebugMessage!]!
    @deprecated(reason: "debugMessages is deprecated. Use messageLogs instead.")

  # Returns the user with the given ID. If no ID is specified,
  # the current user is implied.
  user(id: ID): User

  # Returns a list of users who's name or email match search string.
  users(
    input: UserSearchOptions
    first: Int = 15
    after: String = ""
    search: String = ""
  ): UserConnection!

  # Returns a single alert with the given ID.
  alert(id: Int!): Alert

  # Returns a paginated list of alerts.
  alerts(input: AlertSearchOptions): AlertConnection!

  # Returns a single service with the given ID.
  service(id: ID!): Service

  # Returns a single integration key with the given ID.
  integrationKey(id: ID!): IntegrationKey

  # Returns a heartbeat monitor with the given ID
  heartbeatMonitor(id: ID!): HeartbeatMonitor

  # Returns a paginated list of services.
  services(input: ServiceSearchOptions): ServiceConnection!

  # Returns a single rotation with the given ID.
  rotation(id: ID!): Rotation

  # Returns a paginated list of rotations.
  rotations(input: RotationSearchOptions): RotationConnection!

  calcRotationHandoffTimes(
    input: CalcRotationHandoffTimesInput
  ): [ISOTimestamp!]!

  # Returns a single schedule with the given ID.
  schedule(id: ID!): Schedule

  # Returns the public information of a calendar subscription
  userCalendarSubscription(id: ID!): UserCalendarSubscription

  # Returns a paginated list of schedules.
  schedules(input: ScheduleSearchOptions): ScheduleConnection!

  # Returns a single escalation policy with the given ID.
  escalationPolicy(id: ID!): EscalationPolicy

  # Returns a paginated list of escalation policies.
  escalationPolicies(
    input: EscalationPolicySearchOptions
  ): EscalationPolicyConnection!

  # Returns the list of auth subjects for the given provider ID.
  authSubjectsForProvider(
    first: Int = 15
    after: String = ""
    providerID: ID!
  ): AuthSubjectConnection!

  # Returns a paginated list of time zones.
  timeZones(input: TimeZoneSearchOptions): TimeZoneConnection!

  # Allows searching for assigned labels.
  labels(input: LabelSearchOptions): LabelConnection!

  # Allows searching for label keys.
  labelKeys(input: LabelKeySearchOptions): StringConnection!

  # Allows searching for label values.
  labelValues(input: LabelValueSearchOptions): StringConnection!

  # Allows searching for integration keys.
  integrationKeys(input: IntegrationKeySearchOptions): IntegrationKeyConnection!

  # Allows searching for user overrides.
  userOverrides(input: UserOverrideSearchOptions): UserOverrideConnection!

  # Returns a single user override with the given ID.
  userOverride(id: ID!): UserOverride

  # Returns public server configuration values. If all is set to true,
  # then all values are returned (must be admin).
  config(all: Boolean): [ConfigValue!]!

  # Returns configuration hints (must be admin).
  configHints: [ConfigHint!]!

  # Returns configuration limits
  systemLimits: [SystemLimit!]!

  # Returns the message status
  debugMessageStatus(input: DebugMessageStatusInput!): DebugMessageStatusInfo!

  # Returns a contact method with the given ID.
  userContactMethod(id: ID!): UserContactMethod

  # Returns the list of Slack channels available to the current user.
  slackChannels(input: SlackChannelSearchOptions): SlackChannelConnection!

  # Returns a Slack channel with the given ID.
  slackChannel(id: ID!): SlackChannel

  generateSlackAppManifest: String!

  linkAccountInfo(token: ID!): LinkAccountInfo

  swoStatus: SWOStatus!
}

type SWOStatus {
  state: SWOState!
  lastStatus: String!
  lastError: String!

  nodes: [SWONode!]!

  mainDBVersion: String!
  nextDBVersion: String!
}

enum SWOState {
  unknown
  resetting
  idle
  syncing
  pausing
  executing
  done
}

type SWONode {
  id: ID!

  canExec: Boolean!
  isLeader: Boolean!

  """
  The uptime of the node in seconds. Empty if the node/connection is *not* a GoAlert instance in SWO mode.
  """
  uptime: String!

  configError: String!
  connections: [SWOConnection!]
}
type SWOConnection {
  name: String!
  version: String!
  type: String!
  isNext: Boolean!
  count: Int!
}

type LinkAccountInfo {
  userDetails: String!
  alertID: Int
  alertNewStatus: AlertStatus
}

input AlertMetricsOptions {
  rInterval: ISORInterval!

  filterByServiceID: [ID!]
}

type AlertDataPoint {
  timestamp: ISOTimestamp!
  alertCount: Int!
}

input DebugMessagesInput {
  first: Int = 15
  createdBefore: ISOTimestamp
  createdAfter: ISOTimestamp
}

type DebugMessage {
  id: ID!
  createdAt: ISOTimestamp!
  updatedAt: ISOTimestamp!
  type: String!
  status: String!
  userID: ID
  userName: String
  source: String
  destination: String!
  serviceID: ID
  serviceName: String
  alertID: Int
  providerID: ID
  sentAt: ISOTimestamp
  retryCount: Int!
}

input MessageLogSearchOptions {
  first: Int = 50
  after: String = ""
  createdBefore: ISOTimestamp
  createdAfter: ISOTimestamp
  search: String = ""
  omit: [ID!]
}

type MessageLogConnection {
  nodes: [DebugMessage!]!
  pageInfo: PageInfo!
}

input SlackChannelSearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [ID!]
}

type SlackChannel {
  id: ID!
  name: String!
  teamID: String!
}

type SlackChannelConnection {
  nodes: [SlackChannel!]!
  pageInfo: PageInfo!
}

type SystemLimit {
  id: SystemLimitID!
  description: String!
  value: Int!
}

input SystemLimitInput {
  id: SystemLimitID!
  value: Int!
}

type ConfigValue {
  id: String!
  description: String!
  value: String!
  type: ConfigType!
  password: Boolean!
  deprecated: String!
}
type ConfigHint {
  id: String!
  value: String!
}
enum ConfigType {
  string
  stringList
  integer
  boolean
}
enum SystemLimitID {
  CalendarSubscriptionsPerUser
  NotificationRulesPerUser
  ContactMethodsPerUser
  EPStepsPerPolicy
  EPActionsPerStep
  ParticipantsPerRotation
  RulesPerSchedule
  IntegrationKeysPerService
  UnackedAlertsPerService
  TargetsPerSchedule
  HeartbeatMonitorsPerService
  UserOverridesPerSchedule
}

input UserOverrideSearchOptions {
  first: Int = 15
  after: String = ""
  omit: [ID!]

  scheduleID: ID # limit search to a single schedule
  filterAddUserID: [ID!] # only return overrides where the provided users have been added to a schedule (add or replace types).
  filterRemoveUserID: [ID!] # only return overrides where the provided users have been removed from a schedule (remove or replace types).
  filterAnyUserID: [ID!] # only return overrides that add/remove/replace at least one of the provided user IDs.
  start: ISOTimestamp # start of the window to search for.
  end: ISOTimestamp # end of the window to search for.
}

type UserOverrideConnection {
  nodes: [UserOverride!]!
  pageInfo: PageInfo!
}

type IntegrationKeyConnection {
  nodes: [IntegrationKey!]!
  pageInfo: PageInfo!
}

type UserOverride {
  id: ID!

  start: ISOTimestamp!
  end: ISOTimestamp!

  addUserID: ID!
  removeUserID: ID!

  addUser: User
  removeUser: User

  target: Target!
}
input LabelSearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  uniqueKeys: Boolean = false
  omit: [ID!]
}

input LabelKeySearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [String!]
}

input LabelValueSearchOptions {
  key: String!
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [String!]
}

input IntegrationKeySearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [String!]
}

type LabelConnection {
  nodes: [Label!]!
  pageInfo: PageInfo!
}

type StringConnection {
  nodes: [String!]!
  pageInfo: PageInfo!
}

type PhoneNumberInfo {
  id: String!
  countryCode: String!
  regionCode: String!
  formatted: String!
  valid: Boolean!
  error: String!
}

type DebugCarrierInfo {
  name: String!
  type: String!
  mobileNetworkCode: String!
  mobileCountryCode: String!
}

input DebugCarrierInfoInput {
  number: String!
}

input DebugSendSMSInput {
  from: String!
  to: String!
  body: String!
}

type DebugSendSMSInfo {
  id: ID!
  providerURL: String!
  fromNumber: String!
}

input DebugMessageStatusInput {
  providerMessageID: ID!
}

type DebugMessageStatusInfo {
  state: NotificationState!
}

type TemporarySchedule {
  start: ISOTimestamp!
  end: ISOTimestamp!

  shifts: [OnCallShift!]!
}

input ClearTemporarySchedulesInput {
  scheduleID: ID!

  start: ISOTimestamp!
  end: ISOTimestamp!
}
input SetTemporaryScheduleInput {
  scheduleID: ID!

  clearStart: ISOTimestamp
  clearEnd: ISOTimestamp

  start: ISOTimestamp!
  end: ISOTimestamp!

  shifts: [SetScheduleShiftInput!]!
}
input SetScheduleShiftInput {
  userID: ID!
  start: ISOTimestamp!
  end: ISOTimestamp!
}

enum SWOAction {
  reset
  execute
}

type Mutation {
  swoAction(action: SWOAction!): Boolean!
  linkAccount(token: ID!): Boolean!

  setTemporarySchedule(input: SetTemporaryScheduleInput!): Boolean!
  clearTemporarySchedules(input: ClearTemporarySchedulesInput!): Boolean!

  setScheduleOnCallNotificationRules(
    input: SetScheduleOnCallNotificationRulesInput!
  ): Boolean!

  debugCarrierInfo(input: DebugCarrierInfoInput!): DebugCarrierInfo!
  debugSendSMS(input: DebugSendSMSInput!): DebugSendSMSInfo
  addAuthSubject(input: AuthSubjectInput!): Boolean!
  deleteAuthSubject(input: AuthSubjectInput!): Boolean!
  endAllAuthSessionsByCurrentUser: Boolean!
  updateUser(input: UpdateUserInput!): Boolean!

  testContactMethod(id: ID!): Boolean!

  # Updates the status for multiple alerts given the list of alertIDs and the status they want to be updated to.
  updateAlerts(input: UpdateAlertsInput!): [Alert!]

  # Updates the fields for a rotation given the rotationID, also updates ordering of and number of users for the rotation.
  updateRotation(input: UpdateRotationInput!): Boolean!

  # Escalates multiple alerts given the list of alertIDs.
  escalateAlerts(input: [Int!]): [Alert!]

  # Updates the favorite status of a target.
  setFavorite(input: SetFavoriteInput!): Boolean!

  updateService(input: UpdateServiceInput!): Boolean!
  updateEscalationPolicy(input: UpdateEscalationPolicyInput!): Boolean!
  updateEscalationPolicyStep(input: UpdateEscalationPolicyStepInput!): Boolean!

  deleteAll(input: [TargetInput!]): Boolean!

  createAlert(input: CreateAlertInput!): Alert

  createService(input: CreateServiceInput!): Service
  createEscalationPolicy(input: CreateEscalationPolicyInput!): EscalationPolicy
  createEscalationPolicyStep(
    input: CreateEscalationPolicyStepInput!
  ): EscalationPolicyStep
  createRotation(input: CreateRotationInput!): Rotation

  createIntegrationKey(input: CreateIntegrationKeyInput!): IntegrationKey

  createHeartbeatMonitor(input: CreateHeartbeatMonitorInput!): HeartbeatMonitor

  setLabel(input: SetLabelInput!): Boolean!

  createSchedule(input: CreateScheduleInput!): Schedule

  createUser(input: CreateUserInput!): User

  createUserCalendarSubscription(
    input: CreateUserCalendarSubscriptionInput!
  ): UserCalendarSubscription!
  updateUserCalendarSubscription(
    input: UpdateUserCalendarSubscriptionInput!
  ): Boolean!

  updateScheduleTarget(input: ScheduleTargetInput!): Boolean!
  createUserOverride(input: CreateUserOverrideInput!): UserOverride

  createUserContactMethod(
    input: CreateUserContactMethodInput!
  ): UserContactMethod
  createUserNotificationRule(
    input: CreateUserNotificationRuleInput!
  ): UserNotificationRule
  updateUserContactMethod(input: UpdateUserContactMethodInput!): Boolean!
  sendContactMethodVerification(
    input: SendContactMethodVerificationInput!
  ): Boolean!
  verifyContactMethod(input: VerifyContactMethodInput!): Boolean!

  updateSchedule(input: UpdateScheduleInput!): Boolean!
  updateUserOverride(input: UpdateUserOverrideInput!): Boolean!
  updateHeartbeatMonitor(input: UpdateHeartbeatMonitorInput!): Boolean!

  updateAlertsByService(input: UpdateAlertsByServiceInput!): Boolean!

  setConfig(input: [ConfigValueInput!]): Boolean!
  setSystemLimits(input: [SystemLimitInput!]!): Boolean!
}

input UpdateAlertsByServiceInput {
  serviceID: ID!
  newStatus: AlertStatus!
}

input CreateAlertInput {
  summary: String!
  details: String
  serviceID: ID!
  sanitize: Boolean
}

input CreateUserInput {
  username: String!
  password: String!
  name: String
  email: String
  role: UserRole
  favorite: Boolean
}

input CreateUserCalendarSubscriptionInput {
  name: String!
  reminderMinutes: [Int!]
  scheduleID: ID!
  disabled: Boolean
}
input UpdateUserCalendarSubscriptionInput {
  id: ID!
  name: String
  reminderMinutes: [Int!]
  disabled: Boolean
}
type UserCalendarSubscription {
  id: ID!
  name: String!
  reminderMinutes: [Int!]!
  scheduleID: ID!
  schedule: Schedule
  lastAccess: ISOTimestamp!
  disabled: Boolean!

  # Subscription url, only available upon creation.
  url: String
}

input ConfigValueInput {
  id: String!
  value: String!
}

input UpdateUserOverrideInput {
  id: ID!

  start: ISOTimestamp
  end: ISOTimestamp

  addUserID: ID
  removeUserID: ID
}

input CreateUserOverrideInput {
  scheduleID: ID

  start: ISOTimestamp!
  end: ISOTimestamp!

  addUserID: ID
  removeUserID: ID
}

input CreateScheduleInput {
  name: String!
  description: String
  timeZone: String!
  favorite: Boolean

  targets: [ScheduleTargetInput!]
  newUserOverrides: [CreateUserOverrideInput!]
}

input ScheduleTargetInput {
  scheduleID: ID
  target: TargetInput
  newRotation: CreateRotationInput
  rules: [ScheduleRuleInput!]!
}

input ScheduleRuleInput {
  id: ID
  start: ClockTime
  end: ClockTime

  # weekdayFilter is a 7-item array that indicates if the rule
  # is active on each weekday, starting with Sunday.
  weekdayFilter: WeekdayFilter
}

input SetLabelInput {
  target: TargetInput
  key: String!

  # If value is empty, the label is removed.
  value: String!
}

input TimeZoneSearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [ID!]
}

type TimeZoneConnection {
  nodes: [TimeZone!]!
  pageInfo: PageInfo!
}

type TimeZone {
  id: String!
}

input CreateServiceInput {
  name: String!
  description: String = ""

  favorite: Boolean

  escalationPolicyID: ID
  newEscalationPolicy: CreateEscalationPolicyInput
  newIntegrationKeys: [CreateIntegrationKeyInput!]
  labels: [SetLabelInput!]
  newHeartbeatMonitors: [CreateHeartbeatMonitorInput!]
}

input CreateEscalationPolicyInput {
  name: String!
  description: String = ""
  repeat: Int = 3

  favorite: Boolean

  steps: [CreateEscalationPolicyStepInput!]
}

input CreateEscalationPolicyStepInput {
  escalationPolicyID: ID

  delayMinutes: Int!

  targets: [TargetInput!]
  newRotation: CreateRotationInput
  newSchedule: CreateScheduleInput
}

type EscalationPolicyStep {
  id: ID!
  stepNumber: Int!
  delayMinutes: Int!
  targets: [Target!]!
  escalationPolicy: EscalationPolicy
}

input UpdateScheduleInput {
  id: ID!
  name: String
  description: String
  timeZone: String
}

input UpdateServiceInput {
  id: ID!
  name: String
  description: String
  escalationPolicyID: ID
  maintenanceExpiresAt: ISOTimestamp
}

input UpdateEscalationPolicyInput {
  id: ID!
  name: String
  description: String
  repeat: Int
  stepIDs: [String!]
}

input UpdateEscalationPolicyStepInput {
  id: ID!
  delayMinutes: Int
  targets: [TargetInput!]
}

input SetFavoriteInput {
  target: TargetInput!
  favorite: Boolean!
}

type EscalationPolicyConnection {
  nodes: [EscalationPolicy!]!
  pageInfo: PageInfo!
}

type AlertConnection {
  nodes: [Alert!]!
  pageInfo: PageInfo!
}

type ScheduleConnection {
  nodes: [Schedule!]!
  pageInfo: PageInfo!
}

type Schedule {
  id: ID!
  name: String!
  description: String!
  timeZone: String!

  assignedTo: [Target!]!
  shifts(start: ISOTimestamp!, end: ISOTimestamp!): [OnCallShift!]!

  targets: [ScheduleTarget!]!
  target(input: TargetInput!): ScheduleTarget
  isFavorite: Boolean!

  temporarySchedules: [TemporarySchedule!]!
  onCallNotificationRules: [OnCallNotificationRule!]!
}

input SetScheduleOnCallNotificationRulesInput {
  scheduleID: ID!
  rules: [OnCallNotificationRuleInput!]!
}

input OnCallNotificationRuleInput {
  id: ID
  target: TargetInput!

  # time indicates a time-of-day (in the schedule's time zone)
  # to send a message of current on-call users.
  #
  # If time is null, a notification will be sent any time the set of on-call users
  # changes for this schedule.
  time: ClockTime

  # weekdayFilter indicates which days of the week this rule is evaluated.
  #
  # It is required for time-of-day notifications and must be null if time is null.
  weekdayFilter: WeekdayFilter
}

type OnCallNotificationRule {
  id: ID!
  target: Target!
  time: ClockTime
  weekdayFilter: WeekdayFilter
}

type OnCallShift {
  userID: ID!
  user: User
  start: ISOTimestamp!
  end: ISOTimestamp!
  truncated: Boolean!
}

type ScheduleTarget {
  scheduleID: ID!
  target: Target!
  rules: [ScheduleRule!]!
}

type ScheduleRule {
  id: ID! @deprecated(reason: "no longer used")
  scheduleID: ID!

  start: ClockTime!
  end: ClockTime!

  # weekdayFilter is a 7-item array that indicates if the rule
  # is active on each weekday, starting with Sunday.
  weekdayFilter: WeekdayFilter!

  target: Target!
}

type RotationConnection {
  nodes: [Rotation!]!
  pageInfo: PageInfo!
}

input CreateRotationInput {
  name: String!
  description: String

  timeZone: String!
  start: ISOTimestamp!
  favorite: Boolean

  type: RotationType!
  shiftLength: Int = 1

  userIDs: [ID!]
}

type Rotation {
  id: ID!
  name: String!
  description: String!
  isFavorite: Boolean!

  start: ISOTimestamp!
  timeZone: String!

  type: RotationType!
  shiftLength: Int!

  activeUserIndex: Int!

  userIDs: [ID!]!
  users: [User!]!

  nextHandoffTimes(num: Int): [ISOTimestamp!]!
}

enum RotationType {
  weekly
  daily
  hourly
}

input UpdateAlertsInput {
  # List of alertIDs.
  alertIDs: [Int!]!

  newStatus: AlertStatus!
}

input UpdateRotationInput {
  id: ID!

  name: String
  description: String
  timeZone: String
  start: ISOTimestamp
  type: RotationType
  shiftLength: Int

  activeUserIndex: Int

  # activeUserIndex will not be changed, as the index will remain the same.
  # On call user may change since whatever index is put into activeUserIndex will be on call.
  userIDs: [ID!]
}

input RotationSearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [ID!]

  # Include only favorited rotations in the results.
  favoritesOnly: Boolean = false

  # Sort favorite rotations first.
  favoritesFirst: Boolean = false
}

input CalcRotationHandoffTimesInput {
  handoff: ISOTimestamp!
  from: ISOTimestamp
  timeZone: String!
  shiftLengthHours: Int!
  count: Int!
}

input EscalationPolicySearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [ID!]

  # Include only favorited escalaton policies in the results.
  favoritesOnly: Boolean = false

  # Sort favorite escalation policies first.
  favoritesFirst: Boolean = false
}

input ScheduleSearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [ID!]

  # Include only favorited services in the results.
  favoritesOnly: Boolean = false

  # Sort favorite services first.
  favoritesFirst: Boolean = false
}

input ServiceSearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [ID!]

  # Include only favorited services in the results.
  favoritesOnly: Boolean = false

  # Sort favorite services first.
  favoritesFirst: Boolean = false
}

input UserSearchOptions {
  first: Int = 15
  after: String = ""
  search: String = ""
  omit: [ID!]
  CMValue: String = ""
  CMType: ContactMethodType

  # Include only favorited services in the results.
  favoritesOnly: Boolean = false

  # Sort favorite services first.
  favoritesFirst: Boolean = false
}

input AlertSearchOptions {
  filterByStatus: [AlertStatus!]
  filterByServiceID: [ID!]
  search: String = ""
  first: Int = 15
  after: String = ""
  favoritesOnly: Boolean = false
  includeNotified: Boolean = false
  omit: [Int!]
  sort: AlertSearchSort = statusID
  createdBefore: ISOTimestamp
  notCreatedBefore: ISOTimestamp
  closedBefore: ISOTimestamp
  notClosedBefore: ISOTimestamp
}

enum AlertSearchSort {
  statusID
  dateID
  dateIDReverse
}

# An ISODuration is an RFC3339-formatted duration string.
scalar ISODuration

# An ISORInterval is an RFC3339-formatted repeating interval string.
scalar ISORInterval

# An ISOTimestamp is an RFC3339-formatted timestamp string.
scalar ISOTimestamp

# ClockTime is a 24-hour time in the format 00:00.
scalar ClockTime

# WeekdayFilter is an array of 7 true/false values representing days of the week.
# The first index (0) represents Sunday.
scalar WeekdayFilter

type Alert {
  id: ID!
  alertID: Int!
  status: AlertStatus!
  summary: String!
  details: String!
  createdAt: ISOTimestamp!
  serviceID: ID!
  service: Service

  # Escalation Policy State for the alert.
  state: AlertState

  # Recent log entries for the alert.
  recentEvents(input: AlertRecentEventsOptions): AlertLogEntryConnection!

  pendingNotifications: [AlertPendingNotification!]!

  # metrics are only available for closed alerts
  metrics: AlertMetric
}

type AlertMetric {
  escalated: Boolean!
  closedAt: ISOTimestamp!
  timeToAck: ISODuration!
  timeToClose: ISODuration!
}

type AlertPendingNotification {
  destination: String!
}

input AlertRecentEventsOptions {
  limit: Int
  after: String = ""
}

type AlertLogEntryConnection {
  nodes: [AlertLogEntry!]!
  pageInfo: PageInfo!
}

type AlertLogEntry {
  id: Int!
  timestamp: ISOTimestamp!
  message: String!
  state: NotificationState
}

type NotificationState {
  details: String!
  status: NotificationStatus
  formattedSrcValue: String!
}

enum NotificationStatus {
  OK
  WARN
  ERROR
}

# The escalation policy state details for the alert.
type AlertState {
  lastEscalation: ISOTimestamp!
  stepNumber: Int!
  repeatCount: Int!
}

type Service {
  id: ID!
  name: String!
  description: String!
  escalationPolicyID: ID!
  escalationPolicy: EscalationPolicy
  isFavorite: Boolean!
  maintenanceExpiresAt: ISOTimestamp

  onCallUsers: [ServiceOnCallUser!]!
  integrationKeys: [IntegrationKey!]!
  labels: [Label!]!
  heartbeatMonitors: [HeartbeatMonitor!]!

  notices: [Notice!]!
}

input CreateIntegrationKeyInput {
  serviceID: ID
  type: IntegrationKeyType!
  name: String!
}

input CreateHeartbeatMonitorInput {
  serviceID: ID
  name: String!
  timeoutMinutes: Int!
}

input UpdateHeartbeatMonitorInput {
  id: ID!
  name: String
  timeoutMinutes: Int
}

enum HeartbeatMonitorState {
  inactive
  healthy
  unhealthy
}

type HeartbeatMonitor {
  id: ID!
  serviceID: ID!
  name: String!
  timeoutMinutes: Int!
  lastState: HeartbeatMonitorState!
  lastHeartbeat: ISOTimestamp
  href: String!
}

type Label {
  key: String!
  value: String!
}

type IntegrationKey {
  id: ID!
  serviceID: ID!
  type: IntegrationKeyType!
  name: String!
  href: String!
}

enum IntegrationKeyType {
  generic
  grafana
  site24x7
  prometheusAlertmanager
  email
}

type ServiceOnCallUser {
  userID: ID!
  userName: String!
  stepNumber: Int!
}

type EscalationPolicy {
  id: ID!
  name: String!
  description: String!
  repeat: Int!
  isFavorite: Boolean!

  assignedTo: [Target!]!
  steps: [EscalationPolicyStep!]!

  notices: [Notice!]!
}

# Different Alert Status.
enum AlertStatus {
  StatusAcknowledged
  StatusClosed
  StatusUnacknowledged
}

type Target {
  id: ID!
  type: TargetType!
  name: String!
}

input TargetInput {
  id: ID!
  type: TargetType!
}

enum TargetType {
  escalationPolicy
  notificationChannel
  slackChannel
  slackUserGroup
  notificationPolicy
  rotation
  service
  schedule
  user
  chanWebhook
  integrationKey
  userOverride
  notificationRule
  contactMethod
  heartbeatMonitor
  calendarSubscription
  userSession
}

type ServiceConnection {
  nodes: [Service!]!
  pageInfo: PageInfo!
}

type UserConnection {
  nodes: [User!]!
  pageInfo: PageInfo!
}

type AuthSubjectConnection {
  nodes: [AuthSubject!]!
  pageInfo: PageInfo!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

input UpdateUserInput {
  id: ID!
  name: String
  email: String
  role: UserRole

  statusUpdateContactMethodID: ID
    @deprecated(
      reason: "Use `UpdateUserContactMethodInput.enableStatusUpdates` instead."
    )
}

input AuthSubjectInput {
  userID: ID!
  providerID: ID!
  subjectID: ID!
}

enum UserRole {
  unknown
  user
  admin
}

type User {
  id: ID!

  role: UserRole!

  # The user's configured name.
  name: String!

  # Email of the user.
  email: String!

  contactMethods: [UserContactMethod!]!
  notificationRules: [UserNotificationRule!]!
  calendarSubscriptions: [UserCalendarSubscription!]!

  statusUpdateContactMethodID: ID!
    @deprecated(reason: "Use `UserContactMethod.statusUpdates` instead.")

  authSubjects: [AuthSubject!]!
  sessions: [UserSession!]!

  onCallSteps: [EscalationPolicyStep!]!

  isFavorite: Boolean!
}

type UserSession {
  id: ID!
  current: Boolean!
  userAgent: String!
  createdAt: ISOTimestamp!
  lastAccessAt: ISOTimestamp!
}

type UserNotificationRule {
  id: ID!
  delayMinutes: Int!

  contactMethodID: ID!
  contactMethod: UserContactMethod
}

enum ContactMethodType {
  SMS
  VOICE
  EMAIL
  WEBHOOK
  SLACK_DM
}

# A method of contacting a user.
type UserContactMethod {
  id: ID!
  type: ContactMethodType

  # User-defined label for this contact method.
  name: String!
  value: String!
  formattedValue: String!
  disabled: Boolean!
  pending: Boolean!

  lastTestVerifyAt: ISOTimestamp
  lastTestMessageState: NotificationState
  lastVerifyMessageState: NotificationState

  statusUpdates: StatusUpdateState!
}

enum StatusUpdateState {
  DISABLED
  ENABLED
  ENABLED_FORCED
  DISABLED_FORCED
}

input CreateUserContactMethodInput {
  userID: ID!

  type: ContactMethodType!
  name: String!
  value: String!
  newUserNotificationRule: CreateUserNotificationRuleInput
}

input CreateUserNotificationRuleInput {
  userID: ID
  contactMethodID: ID
  delayMinutes: Int!
}

input UpdateUserContactMethodInput {
  id: ID!

  name: String
  value: String

  # If true, this contact method will receive status updates.
  #
  # Note: Some contact method types, like webhooks, will always receive status
  # updates and this value is ignored.
  enableStatusUpdates: Boolean
}

input SendContactMethodVerificationInput {
  contactMethodID: ID!
}

input VerifyContactMethodInput {
  contactMethodID: ID!
  code: Int!
}

type AuthSubject {
  providerID: ID!
  subjectID: ID!
  userID: ID!
}

type Notice {
  type: NoticeType!
  message: String!
  details: String!
}

enum NoticeType {
  WARNING
  ERROR
  INFO
}
